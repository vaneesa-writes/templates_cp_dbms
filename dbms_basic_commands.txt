Creating Database
mysql> create database southwind;
mysql> drop database southwind;
mysql> show databases;
mysql> use southwind;
mysql> ahow tables;


Creating Tables 

mysql> create table <table-name> (column1 dtype1,column2,dtype2,......);
mysql> create table student1(rollno int, name varchar(10),dob date, city varchar(10), state varchar(10));
mysql> DESC <table-name>
mysql> create table products (
productID INT UNSIGNED NOT NULL AUTO_INCREMENT,
productCode CHAR(3) NOT NULL DEFAULT '',
name VARCHAR(30) NOT NULL DEFAULT '',
quantity INT UNSIGNED NOT NULL DEFAULT 0,
 price DECIMAL(7,2) NOT NULL DEFAULT 99999.99,
 PRIMARY KEY (productID)
 );

Dropping Tables

Drop table <table-name>;

Altering Tables

Alter can be used with add / drop commands to add columsn / drop columns
Alter table <tablename> add (columnname datatype, ...);
Alter table <tablename> drop column columnname1,drop column columnname2;

Insert to Table

INSERT INTO products VALUES (1001, 'PEN', 'Pen Red', 5000, 1.23);
INSERT INTO products VALUES (NULL, 'PEN', 'Pen Blue', 8000, 1.25); 
INSERT INTO products VALUES (NULL, 'PEN', 'Pen Blue', 8000, 1.25),(NULL, 'PEN', 'Pen Black', 2000, 1.25);
INSERT INTO products (productCode, name, quantity, price) VALUES('PEC', 'Pencil 2B', 10000, 0.48), ('PEC', 'Pencil 2H', 8000, 0.49);
INSERT INTO products (productCode, name) VALUES ('PEC', 'Pencil HB');

Update to Table

UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;

UPDATE Customers
SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
WHERE CustomerID = 1;

Delete

DELETE FROM table_name WHERE condition;
DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';


Where

mysql> select name , price from products where price<1.0;

Like and Not Like (Pattern matching) 
% -> any number of char
_ -> single character
mysql> select name,price from products where name like 'Pencil%';
mysql> select name,price from products where name like 'P__';

Logical operators and,or,xor,not

mysql> SELECT * FROM products WHERE quantity >= 5000 AND name LIKE 'Pen %';
mysql> SELECT * FROM products WHERE NOT (quantity >= 5000 AND name LIKE 'Pen%')

In and not in

mysql> SELECT * FROM products WHERE name IN ('Pen Red', 'Pen Black');

Between 

mysql> SELECT * FROM products WHERE (price BETWEEN 1.0 AND 2.0) AND (quantity BETWEEN 1000 AND 2000);

Is NULL 

mysql> SELECT * FROM products WHERE productCode IS NOT NULL;

ORDER By 

mysql> SELECT * FROM products WHERE name LIKE 'Pen %' ORDER BY price DESC;

LIMIT

mysql> SELECT * FROM products ORDER BY price LIMIT 2;

As -Alias

mysql> SELECT productID AS ID, productCode AS Code,name AS Description, price AS `Unit Price` FROM products ORDER BY ID;
+------+------+-------------+------------+
| ID | Code | Description | Unit Price |
+------+------+-------------+------------+
| 1001 | PEN | Pen Red | 1.23 |
| 1002 | PEN | Pen Blue | 1.25 |
| 1003 | PEN | Pen Black | 1.25 |
| 1004 | PEC | Pencil 2B | 0.48 |
| 1005 | PEC | Pencil 2H | 0.49 |
| 1006 | PEC | Pencil HB | 99999.99 |

Concat

mysql> SELECT CONCAT(productCode, ' - ', name) AS `Product Description`, price FROM products;

All and Any

These are sub queries 
Inner query returns a set of values that satisfy the inner query condition
Outer query selects those columns based on condition between inner and outer query


mysql> select * from products;
+-----------+-------------+-----------+----------+----------+
| productID | productCode | name      | quantity | price    |
+-----------+-------------+-----------+----------+----------+
|      1001 | PEN         | Pen Red   |     5000 |     1.23 |
|      1002 | PEN         | Pen Blue  |     8000 |     1.25 |
|      1003 | PEN         | Pen Blue  |     8000 |     1.25 |
|      1004 | PEN         | Pen Black |     2000 |     1.25 |
|      1005 | PEC         | Pencil 2B |    10000 |     0.48 |
|      1006 | PEC         | Pencil 2H |     8000 |     0.49 |
|      1007 | PEC         | Pencil HB |        0 | 99999.99 |
+-----------+-------------+-----------+----------+----------+

ALL ( the outer query must match all values in inner query)

mysql> select productID from products where productCode='PEN';
+-----------+
| productID |
+-----------+
|      1001 |
|      1002 |
|      1003 |
|      1004 |
+-----------+
mysql> select productID,name from products where productID= ALL(select productID from products where productCode='PEN');
Empty set (0.00 sec)
since there is no product id which is equal to all {1001,1002,1003,1004}

mysql> select productID from products where productCode='PEN' AND name='Pen Red';
+-----------+
| productID |
+-----------+
|      1001 |
+-----------+

mysql> select productID,name from products where productID= ALL(select productID from products where productCode='PEN' AND name='Pen Red');
+-----------+---------+
| productID | name    |
+-----------+---------+
|      1001 | Pen Red |
+-----------+---------+

ANY 

The outer query value must match which anyone of the inner query returned set

mysql> select productID,name from products where productID= ANY(select productID from products where productCode='PEN');
+-----------+-----------+
| productID | name      |
+-----------+-----------+
|      1001 | Pen Red   |
|      1002 | Pen Blue  |
|      1003 | Pen Blue  |
|      1004 | Pen Black |
+-----------------------+

Union Union All Intersect 

But two necessary conditions need to be fulfilled when we use the these commands. These are:
1. Both SELECT statements should have an equal number of fields in the same order.
2. The data types of these fields should either be the same or compatible with each 
other

Union
 
No duplicate rows
SELECT (coloumn_names) from table1 [WHERE condition] UNION SELECT (coloumn_names) from table2 
[WHERE condition];

Union All 

duplicates allowed
SELECT (coloumn_names) from table1 [WHERE condition] UNION ALL SELECT (coloumn_names) from table2 
[WHERE condition];

Intersect 

rows common to both tables (IN can be used too as substitue)
SELECT (coloumn_names) from table1 [WHERE condition] INTERSECT SELECT (coloumn_names) from table2 
[WHERE condition];

GROUP By
It is used to make map<key,vector<values>>
mysql> select productCode,count(*) from products group by productCode;
+-------------+----------+
| productCode | count(*) |
+-------------+----------+
| PEN         |        4 |
| PEC         |        3 |
+-------------+----------+

JOINS

Natural join  -> attributes from both table are kept but only one copy of each && column of join need not be specified 
Inner join -> all attributes including dublicate &&  column of join need is to  be specified using ON

mysql> select * from table1;
+---------+------+
| roll_no | name |
+---------+------+
|       1 | A    |
|       2 | B    |
|       3 | C    |
+---------+------+
3 rows in set (0.00 sec)

mysql> select * from table2;
+---------+-------+
| roll_no | marks |
+---------+-------+
|       1 |    10 |
|       2 |    20 |
|       3 |    30 |
|       1 |   100 |
|       2 |   200 |
|       3 |   300 |
+---------+-------+

Natural join 

SYNTAX: 
SELECT * FROM table1 NATURAL JOIN table2; 
mysql> select * from table1 natural join table2;
+---------+------+-------+
| roll_no | name | marks |
+---------+------+-------+
|       1 | A    |    10 |
|       2 | B    |    20 |
|       3 | C    |    30 |
|       1 | A    |   100 |
|       2 | B    |   200 |
|       3 | C    |   300 |
+---------+------+-------+

INNER JOIN

SELECT * FROM table1 INNER JOIN table2 ON table1.Column_Name = table2.Column_Name; 
mysql> select * from table1 inner join table2 on table1.roll_no=table2.roll_no;
+---------+------+---------+-------+
| roll_no | name | roll_no | marks |
+---------+------+---------+-------+
|       1 | A    |       1 |    10 |
|       2 | B    |       2 |    20 |
|       3 | C    |       3 |    30 |
|       1 | A    |       1 |   100 |
|       2 | B    |       2 |   200 |
|       3 | C    |       3 |   300 |
+---------+------+---------+-------+

LEFT join 

The LEFT JOIN keyword returns all records from the left table (table1), and the matching records from the right table (table2)
SELECT * FROM table1 LEFT JOIN table2 ON table1.Column_Name = table2.Column_Name;

RIGHT join 

The RIGHT JOIN keyword returns all records from the right table (table2), and the matching records from the left table (table1)
SELECT * FROM table1 LEFT JOIN table2 ON table1.Column_Name = table2.Column_Name;

FULL join 

Full join is union of left and right join 
SELECT * FROM table1 FULL JOIN table2 ON table1.Column_Name = table2.Column_Name;

in left,right,full join empty attributes are set to NULL

mysql> INSERT into table1 values (4,'F');
Query OK, 1 row affected (0.01 sec)

mysql> select * from table1 left join table2 on table1.roll_no=table2.roll_no;
+---------+------+---------+-------+
| roll_no | name | roll_no | marks |
+---------+------+---------+-------+
|       1 | A    |       1 |   100 |
|       1 | A    |       1 |    10 |
|       2 | B    |       2 |   200 |
|       2 | B    |       2 |    20 |
|       3 | C    |       3 |   300 |
|       3 | C    |       3 |    30 |
|       4 | F    |    NULL |  NULL |
+---------+------+---------+-------+

